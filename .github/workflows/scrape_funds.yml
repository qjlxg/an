name: Fund Scraper Workflow

on:
  # 当以下文件被推送到仓库时，触发工作流
  push:
    paths:
      - 'scrape_all_funds.py'
      - '.github/workflows/scrape_funds.yml'
  # 允许手动在 GitHub Actions 界面触发工作流
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    env:
      # 设置环境变量，确保时间和日期使用中国上海时区
      TZ: 'Asia/Shanghai'

    steps:
    - name: Checkout repository
      # 检出代码，actions/checkout 自动使用 GITHUB_TOKEN
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      # 安装脚本所需的 Python 库
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 pytz

    - name: Run script (Generate Files)
      # 运行主脚本，只生成文件，不负责 Git 操作
      run: python scrape_all_funds.py
      
    - name: Commit and push results
      # 明确的 Git 提交步骤，确保使用内置的 Actions 身份
      run: |
        # 1. 设置 Git 身份（使用 Actions Bot 是最佳实践）
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        
        # 2. 添加所有新生成的目录（如 202510/）和文件
        # 注意：使用 'git add .' 会追踪所有更改，包括新生成的 YYYYMM 目录
        git add .
        
        # 3. 提交更改。使用 '|| true' 确保在 'No changes to commit' 时不会报错
        git commit -m "Automated update: Add new fund data and low-fee report." || true
        
        # 4. 推送到仓库
        git push
      env:
        # 确保 GITHUB_TOKEN 可用，用于身份验证
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
