name: 概况抓取

on:
  # 1. 允许手动触发工作流
  workflow_dispatch:
  
  # 2. 当关键文件变动时自动运行
  push:
    branches:
      - main # <<< 请务必检查并替换为您的主分支名称 (例如：master 或 main)
    paths:
      - 'scrape_all_funds.py'
      - '.github/workflows/scrape_funds.yml'
      - 'fund_data/**' # 当 fund_data 目录中任何文件变化时触发

# 授予 GITHUB_TOKEN 写入权限，这是自动提交所必需的
permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    
    # 设置时区为上海 (Asia/Shanghai)
    env:
      TZ: Asia/Shanghai

    steps:
      - name: 检出代码
        # 必须拉取完整历史记录 (fetch-depth: 0)，以便 Git 能够正确地进行提交和推送
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 安装依赖 (requests, beautifulsoup4, pandas)
        # 并行抓取需要 pandas 处理 CSV
        run: pip install requests beautifulsoup4 pandas

      - name: 计算输出路径和文件名 (上海时区)
        id: set_path
        run: |
          # 格式化目录：YYYY/MM/DD
          DATE_DIR=$(date +%Y/%m/%d)
          # 格式化文件名：fund_profiles_YYYYMMDD_HHmmss.csv
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          FILENAME="fund_profiles_${TIMESTAMP}.csv"
          
          # 完整的输出路径
          OUTPUT_PATH="${DATE_DIR}/${FILENAME}"
          
          echo "生成的输出路径: ${OUTPUT_PATH}"
          # 将路径设置为环境变量供后续步骤使用
          echo "OUTPUT_PATH=${OUTPUT_PATH}" >> $GITHUB_ENV

      - name: 运行基金信息抓取脚本 (并行加速并打印详细日志)
        # 脚本将自动使用多线程加速抓取
        run: python scrape_all_funds.py "${{ env.OUTPUT_PATH }}"

      - name: 配置 Git 用户并提交更改 (修复并确保提交)
        run: |
          # 1. 配置 Git 身份
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # 2. 检查并添加新生成的文件/目录
          # git add -f 强制添加文件，包括新目录
          git add -f "${{ env.OUTPUT_PATH }}"
          
          # 3. 检查暂存区是否有内容 (最可靠的检查方式)
          # 如果 git diff --cached --exit-code --quiet 失败，则说明暂存区有新的更改
          if git diff --cached --exit-code --quiet; then
              echo "⚠️ Git 暂存区没有新的更改，跳过提交。"
          else
              # 4. 提交更改
              git commit -m "数据抓取(CSV)：自动更新基金概况至 ${{ env.OUTPUT_PATH }}"
              # 5. 推送更改到当前分支
              git push
              echo "✅ 成功提交抓取结果到仓库。"
          fi
